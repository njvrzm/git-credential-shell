#!/usr/bin/env python
import base64
from Crypto.Cipher import AES
import os
import secrets
import shelve
import tempfile
import sys

key_var = 'GIT_SHELL_CREDENTIALS_KEY'
path_var = 'GIT_SHELL_CREDENTIALS_PATH'

iv456 = 'sixteencharacter'

def newKey():
    return base64.b64encode(secrets.token_bytes()).decode('ascii')

def crypter():
    return AES.new(base64.b64decode(os.environ[key_var])[:32], AES.MODE_CBC, iv456)

def encrypt(message):
    encoded = message.encode('utf-8')
    padded = encoded + (b'\0' * (-len(encoded) % 16))
    return crypter().encrypt(padded)

def decrypt(encrypted):
    padded = crypter().decrypt(encrypted)
    return padded.rstrip(b'\0').decode('utf-8')


if __name__ == '__main__':
    command = sys.argv[1]

    if command not in ('setup', 'get', 'store', 'erase'):
        raise ValueError("Unknown command {}".format(command))

    if command == 'setup':
        path = os.path.join(tempfile.mkdtemp(), 'git-credentials')
        print('export {}={}'.format(key_var, newKey()))
        print('export {}={}'.format(path_var, path))
        sys.exit(0)

    if not os.environ.get(path_var):
        raise ValueError("{} not set up".format(os.path.basename(sys.argv[0])))

    with shelve.open(os.environ[path_var]) as data:
        keys = 'username', 'password'
        if command == 'get' and all(key in data for key in keys):
            for key in keys:
                print('{}={}'.format(key, decrypt(data[key])))
        elif command == 'store':
            given = dict(x.rstrip('\r\n').split('=', 1) for x in sys.stdin)
            for key in keys:
                data[key] = encrypt(given[key])
        elif command == 'erase':
            for key in keys:
                data.pop(key, None)
